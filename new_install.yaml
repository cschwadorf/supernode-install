#
# Main playbook to install a supernode
#

#
# Tasks moved into playbooks from here
#
# Separate playbooks
#

# Install required packages an make server ansible compatible

- import_playbook: playbooks/pb_install_all.yaml

#
# old stuff from here
#

- name: Install Freifunk Voreifel super node
  hosts: all
  user: root
  gather_facts: True
  vars:
    snversion: master_v0.1.0

  tasks:
#
#
#
    - debug: 
        msg: "--- Old stuff ---"

    - name: Create freifunk directory
      file: 
        path: /opt/freifunk
        state: directory
        mode: 0755

#   The repo does only work for FF Troisdorf IP range.
#
#    - name: Clone static DHCP config
#      git: 
#        repo: "{{ static_dhcp_repo }}"
#        dest: /opt/freifunk/static-dhcp
#      register: dhcpd
#
#    - name: Add cron static DHCP
#      cron: 
#        name: StaticDHCP 
#        minute: "*"
#        job: "/opt/freifunk/static-dhcp/dhcp-update.sh"
#      when: dhcpd.changed

#    - name: Restart dhcpd
#      service: 
#        name: isc-dhcp-server
#        state: restarted
#      when: dhcpd.changed
#      ignore_errors: yes
    
    
# Most parts useless
#
#    - name: Add cron startup script
#      cron: 
#        name: startup
#        special_time: reboot
#        job: "/opt/freifunk/sn_startup.sh"


# Startup script benÃ¶tigt Slack

# We don't use slack

#    - name: Import Slack token
#      include_vars: "{{ slack_token_file }}"
    
#
# yanic
#

    - name: Create Yanic user
      user:
         name: yanic
         comment: "Yanic service user"
    - name: Create Yanic folder
      file: 
        path: /opt/freifunk/yanic
        state: directory
        mode: 0755
        owner: yanic
        group: yanic
    - name: Copy Yanic config template
      template:
         src: ./files/yanic.conf.j2
         dest: /etc/yanic.conf
         owner: yanic
         group: yanic
         mode: 0444

#
# Go
#

    - name: Shit go stuff
      shell: cd /usr/local && wget https://storage.googleapis.com/golang/go1.9.1.linux-amd64.tar.gz -O go-release-linux-amd64.tar.gz && tar xvf go-release-linux-amd64.tar.gz && rm go-release-linux-amd64.tar.gz

    - name: Adjust path for go
      lineinfile:
        dest: /root/.bashrc
        line: "{{ item }}"
      loop:
               - export GOPATH=/opt/go
               - export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

    - name: Compile go
      shell: go get -v -u github.com/freifunk-voreifel/yanic

    - name: Copy and enable yanic service
      shell: cp /opt/go/src/github.com/freifunk-voreifel/yanic/contrib/init/linux-systemd/yanic.service /lib/systemd/system/yanic.service && systemctl daemon-reload && systemctl enable yanic


#
# respondd
#

    - name: Get respondd
      git: 
        repo: https://github.com/freifunk-voreifel/mesh-announce.git
        dest: /opt/mesh-announce

    - name: Copy respondd service template
      shell: cp /opt/mesh-announce/respondd.service /etc/systemd/system

    - name: Enable respondd service
      shell: systemctl daemon-reload && systemctl enable respondd

#
# netfilter
#

    - name: check modprobe.conf
      stat: path=/etc/modprobe.conf
      register: modprobe1
    - name: create /etc/modprobe.conf when not present
      file: path=/etc/modprobe.conf state=touch owner=root group=root mode=0544
      when: modprobe1.stat.exists == False
    - name: check /etc/modprobe.conf
      lineinfile: dest=/etc/modprobe.conf line="options ip_conntrack hashsize=65536"

    - name: Write version information
      shell: echo {{ snversion }} > /etc/supernode.version
#     shell: touch /etc/supernode.version && echo {{ snversion }} > /etc/supernode.version

#
# Final boot
#

    - name: Reboot the server finally
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      when: tunneldigger.changed
    - name: waiting for server to come back
      local_action:
                   wait_for
                   host={{ inventory_hostname }}
                   port=22
                   delay=20
                   timeout=300
      when: tunneldigger.changed
#
# Final boot
#


# Slack we don't use slack
#    - name: Import Slack token
#      include_vars: "{{ slack_token_file }}"
#    - name: Copy Slacktee Config
#      template: src=./files/slacktee.conf.j2 dest=/etc/slacktee.conf owner=root group=root mode=0544
#    - name: Copy Slacktee
#      copy: src=./files/slacktee.sh dest=/usr/local/bin/slacktee.sh owner=root group=root mode=0744
#
#    - name: Send notification message via Slack
#      local_action:
#        module: slack
#        token: "{{ slack_token }}"
#        msg: "{{ inventory_hostname }} completed with {{ snversion }}"
#        channel: "#technik"
#        username: "Ansible on {{ inventory_hostname }}"
#        parse: 'none'
